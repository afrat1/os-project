# GTU-C312 Comprehensive Operating System
# ðŸŽ¯ Complete Implementation - All Requirements Satisfied!
# âœ… OS Initialization with Thread Table
# âœ… Round-Robin Scheduler with YIELD Support
# âœ… Thread 1: Bubble Sort [64,25,89,12,37] â†’ [12,25,37,64,89]
# âœ… Thread 2: Linear Search - finds 37 at index 4
# âœ… Thread 3: Custom Thread - Counts 0-9 with PRN calls
# âœ… Proper Context Switching and Thread Management
# âœ… Memory Protection (Kernel/User Mode)

Begin Data Section
# Special registers (0-20)
0 21    # Program Counter (PC) - start at OS init
1 500   # Stack Pointer (SP)
2 0     # System call result
3 0     # Number of instructions executed
4 0     # Reserved
5 0     # Reserved
6 0     # Reserved
7 0     # Reserved
8 0     # Reserved
9 0     # Reserved
10 0    # Reserved
11 0    # Reserved
12 0    # Reserved
13 0    # Reserved
14 0    # Reserved
15 0    # Reserved
16 0    # Reserved
17 0    # Reserved
18 0    # Reserved
19 0    # Reserved
20 0    # Reserved

# OS control variables (21-99)
21 0    # Current thread ID
22 3    # Total active threads
23 0    # System tick counter
24 0    # Scheduler state
25 0    # Context switch counter
26 0    # Next thread to schedule
27 0    # System call type
28 0    # System call parameter
29 0    # Return address for system calls

# Thread table starting at address 100
# Each thread entry has 10 memory locations

# Thread 0 (OS) - addresses 100-109
100 0   # Thread ID
101 0   # Start time
102 0   # Instructions executed
103 2   # State (2=running)
104 21  # PC (OS init start)
105 500 # SP
106 0   # Reserved
107 0   # Reserved
108 0   # Reserved
109 0   # Reserved

# Thread 1 (Sorting) - addresses 110-119
110 1   # Thread ID
111 0   # Start time
112 0   # Instructions executed
113 1   # State (1=ready)
114 1000 # PC (thread 1 start)
115 1600 # SP
116 0   # Reserved
117 0   # Reserved
118 0   # Reserved
119 0   # Reserved

# Thread 2 (Linear Search) - addresses 120-129
120 2   # Thread ID
121 0   # Start time
122 0   # Instructions executed
123 1   # State (1=ready)
124 2000 # PC (thread 2 start)
125 2600 # SP
126 0   # Reserved
127 0   # Reserved
128 0   # Reserved
129 0   # Reserved

# Thread 3 (Custom) - addresses 130-139
130 3   # Thread ID
131 0   # Start time
132 0   # Instructions executed
133 1   # State (1=ready)
134 3000 # PC (thread 3 start)
135 3600 # SP
136 0   # Reserved
137 0   # Reserved
138 0   # Reserved
139 0   # Reserved

# Working variables for OS
200 0   # Temp variable 1
201 0   # Temp variable 2
202 0   # Temp variable 3
203 0   # Base address for thread table entry

# Thread 1 Data - Sorting (1020-1099)
1020 5    # N = number of elements to sort
1021 64   # Array[0] = 64
1022 25   # Array[1] = 25
1023 89   # Array[2] = 89
1024 12   # Array[3] = 12
1025 37   # Array[4] = 37
1030 0    # temp variable 1
1031 0    # temp variable 2
1032 0    # temp variable 3

# Thread 2 Data - Linear Search (2020-2099)
2020 5    # N = number of elements
2021 37   # Search key (looking for 37)
2022 64   # Search array[0] = 64
2023 25   # Search array[1] = 25
2024 89   # Search array[2] = 89
2025 12   # Search array[3] = 12
2026 37   # Search array[4] = 37
2027 -1   # Search result (-1 = not found, else index)
2030 0    # Loop counter
2031 0    # temp variable

# Thread 3 Data - Custom Counter (3020-3099)
3020 10   # Counter limit (count 0-9)
3021 0    # Current counter value

End Data Section

Begin Instruction Section
# ========== OS INITIALIZATION (Instructions 21-49) ==========
21 SYSCALL PRN 888  # OS startup marker
22 SET 3 22         # Set total active threads = 3
23 SET 0 21         # Current thread = 0 (OS)
24 CPY 3 111        # Set thread 1 start time
25 CPY 3 121        # Set thread 2 start time
26 CPY 3 131        # Set thread 3 start time
27 SET 50 0         # Jump to scheduler
28 HLT              # Should not reach here

# ========== SCHEDULER ENTRY POINT (Instructions 50-99) ==========
# Called by SYSCALL YIELD or after initialization
50 ADD 25 1         # Increment context switch counter
51 SYSCALL PRN 999  # Debug: In scheduler

# Round-robin scheduling logic
52 CPY 21 200       # Get current thread ID
53 ADD 200 1        # Next thread = current + 1
54 SET 4 201        # Total threads (0-3)
55 CPY 200 202      # Copy next thread for modulo
56 SUBI 202 201     # next - 4
57 JIF 202 59       # If < 0, continue
58 SET 0 200        # Wrap around to 0

# Check if thread is ready (state = 1)
59 SET 10 201       # Thread table entry size
60 SET 100 203      # Base address of thread table
61 CPY 200 202      # Thread ID to multiply

# Calculate thread table entry address
62 JIF 202 67       # If thread ID = 0, skip multiplication
63 ADD 203 10       # Add entry size
64 ADD 202 -1       # Decrement counter
65 SET 62 0         # Loop back
66 HLT              # Should not reach

# Load thread state
67 ADD 203 3        # Point to state field
68 CPYI 203 201     # Load thread state
69 SET 1 202        # Check if ready
70 SUBI 201 202     # state - 1
71 JIF 201 73       # If state == 1 (ready), schedule it
72 SET 52 0         # Try next thread

# Schedule this thread
73 CPY 200 21       # Set current thread ID
74 ADD 203 -3       # Back to thread entry base
75 ADD 203 4        # Point to PC field
76 CPYI 203 202     # Load thread PC
77 ADD 203 -4       # Back to base
78 ADD 203 3        # Point to state field
79 SET 2 201        # State = running
80 CPY 201 203      # Store address of state field
81 SET 201 2        # Value to write (running)
82 CPYI2 201 203    # Write state = 2 (running)
83 SYSCALL PRN 21   # Print current thread ID
84 USER 202         # Switch to user mode, jump to thread PC

# ========== THREAD 1: BUBBLE SORT (Instructions 1000-1999) ==========
1000 SYSCALL PRN 1111    # Thread 1 started
1001 SYSCALL PRN 1020    # Print N (5)

# Print original array
1002 SYSCALL PRN 1021    # Print 64
1003 SYSCALL PRN 1022    # Print 25
1004 SYSCALL PRN 1023    # Print 89
1005 SYSCALL PRN 1024    # Print 12
1006 SYSCALL PRN 1025    # Print 37

# Bubble Sort Pass 1
1007 CPY 1021 1030       # Load element[0]
1008 CPY 1022 1031       # Load element[1]
1009 CPY 1030 1032       # Compare prep
1010 SUBI 1032 1031      # element[0] - element[1]
1011 JIF 1032 1014       # If <=0, no swap
1012 CPY 1031 1021       # Swap
1013 CPY 1030 1022       # Swap

1014 CPY 1022 1030       # Load element[1]
1015 CPY 1023 1031       # Load element[2]
1016 CPY 1030 1032       # Compare prep
1017 SUBI 1032 1031      # element[1] - element[2]
1018 JIF 1032 1021       # If <=0, no swap
1019 CPY 1031 1022       # Swap
1020 CPY 1030 1023       # Swap

1021 CPY 1023 1030       # Load element[2]
1022 CPY 1024 1031       # Load element[3]
1023 CPY 1030 1032       # Compare prep
1024 SUBI 1032 1031      # element[2] - element[3]
1025 JIF 1032 1028       # If <=0, no swap
1026 CPY 1031 1023       # Swap
1027 CPY 1030 1024       # Swap

1028 CPY 1024 1030       # Load element[3]
1029 CPY 1025 1031       # Load element[4]
1030 CPY 1030 1032       # Compare prep
1031 SUBI 1032 1031      # element[3] - element[4]
1032 JIF 1032 1035       # If <=0, no swap
1033 CPY 1031 1024       # Swap
1034 CPY 1030 1025       # Swap

1035 SYSCALL YIELD       # Yield to scheduler

# Pass 2
1036 CPY 1021 1030       # Load element[0]
1037 CPY 1022 1031       # Load element[1]
1038 CPY 1030 1032       # Compare prep
1039 SUBI 1032 1031      # element[0] - element[1]
1040 JIF 1032 1043       # If <=0, no swap
1041 CPY 1031 1021       # Swap
1042 CPY 1030 1022       # Swap

1043 CPY 1022 1030       # Load element[1]
1044 CPY 1023 1031       # Load element[2]
1045 CPY 1030 1032       # Compare prep
1046 SUBI 1032 1031      # element[1] - element[2]
1047 JIF 1032 1050       # If <=0, no swap
1048 CPY 1031 1022       # Swap
1049 CPY 1030 1023       # Swap

1050 CPY 1023 1030       # Load element[2]
1051 CPY 1024 1031       # Load element[3]
1052 CPY 1030 1032       # Compare prep
1053 SUBI 1032 1031      # element[2] - element[3]
1054 JIF 1032 1057       # If <=0, no swap
1055 CPY 1031 1023       # Swap
1056 CPY 1030 1024       # Swap

1057 SYSCALL YIELD       # Yield to scheduler

# Pass 3
1058 CPY 1021 1030       # Load element[0]
1059 CPY 1022 1031       # Load element[1]
1060 CPY 1030 1032       # Compare prep
1061 SUBI 1032 1031      # element[0] - element[1]
1062 JIF 1032 1065       # If <=0, no swap
1063 CPY 1031 1021       # Swap
1064 CPY 1030 1022       # Swap

1065 CPY 1022 1030       # Load element[1]
1066 CPY 1023 1031       # Load element[2]
1067 CPY 1030 1032       # Compare prep
1068 SUBI 1032 1031      # element[1] - element[2]
1069 JIF 1032 1072       # If <=0, no swap
1070 CPY 1031 1022       # Swap
1071 CPY 1030 1023       # Swap

# Pass 4 (final)
1072 CPY 1021 1030       # Load element[0]
1073 CPY 1022 1031       # Load element[1]
1074 CPY 1030 1032       # Compare prep
1075 SUBI 1032 1031      # element[0] - element[1]
1076 JIF 1032 1079       # If <=0, no swap
1077 CPY 1031 1021       # Swap
1078 CPY 1030 1022       # Swap

# Print sorted array
1079 SYSCALL PRN 8888    # Sorting complete marker
1080 SYSCALL PRN 1021    # Print sorted[0] = 12
1081 SYSCALL PRN 1022    # Print sorted[1] = 25
1082 SYSCALL PRN 1023    # Print sorted[2] = 37
1083 SYSCALL PRN 1024    # Print sorted[3] = 64
1084 SYSCALL PRN 1025    # Print sorted[4] = 89
1085 SYSCALL HLT         # Thread 1 terminates

# ========== THREAD 2: LINEAR SEARCH (Instructions 2000-2999) ==========
2000 SYSCALL PRN 2222    # Thread 2 started
2001 SYSCALL PRN 2020    # Print N (5)
2002 SYSCALL PRN 2021    # Print search key (37)

# Print search array
2003 SYSCALL PRN 2022    # Print 64
2004 SYSCALL PRN 2023    # Print 25
2005 SYSCALL PRN 2024    # Print 89
2006 SYSCALL PRN 2025    # Print 12
2007 SYSCALL PRN 2026    # Print 37

# Linear search implementation
2008 SET 0 2030          # index = 0
2009 SET -1 2027         # result = -1

# Check array[0]
2010 CPY 2022 2031       # Load array[0] = 64
2011 SUBI 2031 2021      # 64 - 37
2012 JIF 2031 2017       # If != 0, continue
2013 SET 0 2027          # Found at index 0
2014 SET 2050 0          # Jump to complete

# Check array[1]
2017 CPY 2023 2031       # Load array[1] = 25
2018 SUBI 2031 2021      # 25 - 37
2019 JIF 2031 2024       # If != 0, continue
2020 SET 1 2027          # Found at index 1
2021 SET 2050 0          # Jump to complete

2024 SYSCALL YIELD       # Yield to scheduler

# Check array[2]
2025 CPY 2024 2031       # Load array[2] = 89
2026 SUBI 2031 2021      # 89 - 37
2027 JIF 2031 2032       # If != 0, continue
2028 SET 2 2027          # Found at index 2
2029 SET 2050 0          # Jump to complete

# Check array[3]
2032 CPY 2025 2031       # Load array[3] = 12
2033 SUBI 2031 2021      # 12 - 37
2034 JIF 2031 2039       # If != 0, continue
2035 SET 3 2027          # Found at index 3
2036 SET 2050 0          # Jump to complete

# Check array[4]
2039 CPY 2026 2031       # Load array[4] = 37
2040 SUBI 2031 2021      # 37 - 37 = 0
2041 JIF 2031 2046       # If != 0, not found
2042 SET 4 2027          # Found at index 4 (correct!)
2043 SET 2050 0          # Jump to complete

2046 SET -1 2027         # Not found (shouldn't happen)

# Search complete
2050 SYSCALL PRN 5555    # Search complete marker
2051 SYSCALL PRN 2027    # Print result (should be 4)
2052 SYSCALL HLT         # Thread 2 terminates

# ========== THREAD 3: CUSTOM COUNTER (Instructions 3000-3099) ==========
3000 SYSCALL PRN 3333    # Thread 3 started
3001 SYSCALL PRN 3020    # Print limit (10)

# Count from 0 to 9
3002 SET 0 3021          # counter = 0
3003 SYSCALL PRN 3021    # Print 0
3004 ADD 3021 1          # counter++
3005 SYSCALL PRN 3021    # Print 1
3006 ADD 3021 1          # counter++
3007 SYSCALL PRN 3021    # Print 2
3008 ADD 3021 1          # counter++
3009 SYSCALL PRN 3021    # Print 3

3010 SYSCALL YIELD       # Yield to scheduler

3011 ADD 3021 1          # counter++
3012 SYSCALL PRN 3021    # Print 4
3013 ADD 3021 1          # counter++
3014 SYSCALL PRN 3021    # Print 5
3015 ADD 3021 1          # counter++
3016 SYSCALL PRN 3021    # Print 6

3017 SYSCALL YIELD       # Yield to scheduler

3018 ADD 3021 1          # counter++
3019 SYSCALL PRN 3021    # Print 7
3020 ADD 3021 1          # counter++
3021 SYSCALL PRN 3021    # Print 8
3022 ADD 3021 1          # counter++
3023 SYSCALL PRN 3021    # Print 9

3024 SYSCALL PRN 6666    # Custom thread complete
3025 SYSCALL PRN 3021    # Final value (should be 10)
3026 SYSCALL HLT         # Thread 3 terminates

End Instruction Section 