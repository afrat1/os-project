Begin Data Section
# ====== REGISTERS AND OS AREA (0-20) ======
0 0     # Program Counter (PC)
1 500   # Stack Pointer (SP) - OS stack in OS area  
2 0     # System call result
3 0     # Number of instructions executed

# ====== OS DATA ONLY (21-999) ======
21 0    # Current thread ID
22 3    # Number of active threads (3 active out of 10 total)
23 0    # System tick counter

# Thread Table (100-199, 10 words per thread) - ALL 10 THREADS
# Thread 0 (Loop-based Bubble Sort) - ACTIVE
100 0   # Thread ID
101 0   # Start time
102 0   # Instruction count
103 1   # State (1=Ready, 2=Running, 3=Blocked, 0=Inactive)
104 1000 # PC (starts at address 1000)
105 1900 # SP (stack at end of Thread 0 range: 1900-1999)
106 0   # Reserved
107 0   # Reserved
108 0   # Reserved
109 0   # Reserved

# Thread 1 (Loop-based Linear Search) - ACTIVE
110 1   # Thread ID
111 0   # Start time  
112 0   # Instruction count
113 1   # State (1=Ready)
114 2000 # PC (starts at address 2000)
115 2900 # SP (stack at end of Thread 1 range: 2900-2999)
116 0   # Reserved
117 0   # Reserved
118 0   # Reserved
119 0   # Reserved

# Thread 2 (Loop-based Counter) - ACTIVE
120 2   # Thread ID
121 0   # Start time
122 0   # Instruction count
123 1   # State (1=Ready)
124 3000 # PC (starts at address 3000)
125 3900 # SP (stack at end of Thread 2 range: 3900-3999)
126 0   # Reserved
127 0   # Reserved
128 0   # Reserved
129 0   # Reserved

# Thread 3 - INACTIVE
130 3   # Thread ID
131 0   # Start time
132 0   # Instruction count
133 0   # State (0=Inactive)
134 4000 # PC (would start at address 4000)
135 4900 # SP (stack at end of Thread 3 range: 4900-4999)
136 0   # Reserved
137 0   # Reserved
138 0   # Reserved
139 0   # Reserved

# Thread 4 - INACTIVE
140 4   # Thread ID
141 0   # Start time
142 0   # Instruction count
143 0   # State (0=Inactive)
144 5000 # PC (would start at address 5000)
145 5900 # SP (stack at end of Thread 4 range: 5900-5999)
146 0   # Reserved
147 0   # Reserved
148 0   # Reserved
149 0   # Reserved

# Thread 5 - INACTIVE
150 5   # Thread ID
151 0   # Start time
152 0   # Instruction count
153 0   # State (0=Inactive)
154 6000 # PC (would start at address 6000)
155 6900 # SP (stack at end of Thread 5 range: 6900-6999)
156 0   # Reserved
157 0   # Reserved
158 0   # Reserved
159 0   # Reserved

# Thread 6 - INACTIVE
160 6   # Thread ID
161 0   # Start time
162 0   # Instruction count
163 0   # State (0=Inactive)
164 7000 # PC (would start at address 7000)
165 7900 # SP (stack at end of Thread 6 range: 7900-7999)
166 0   # Reserved
167 0   # Reserved
168 0   # Reserved
169 0   # Reserved

# Thread 7 - INACTIVE
170 7   # Thread ID
171 0   # Start time
172 0   # Instruction count
173 0   # State (0=Inactive)
174 8000 # PC (would start at address 8000)
175 8900 # SP (stack at end of Thread 7 range: 8900-8999)
176 0   # Reserved
177 0   # Reserved
178 0   # Reserved
179 0   # Reserved

# Thread 8 - INACTIVE
180 8   # Thread ID
181 0   # Start time
182 0   # Instruction count
183 0   # State (0=Inactive)
184 9000 # PC (would start at address 9000)
185 9900 # SP (stack at end of Thread 8 range: 9900-9999)
186 0   # Reserved
187 0   # Reserved
188 0   # Reserved
189 0   # Reserved

# Thread 9 (Thread #10 in spec) - INACTIVE
190 9   # Thread ID
191 0   # Start time
192 0   # Instruction count
193 0   # State (0=Inactive)
194 10000 # PC (would start at address 10000)
195 10900 # SP (stack at end of Thread 9 range: 10900-10999)
196 0   # Reserved
197 0   # Reserved
198 0   # Reserved
199 0   # Reserved

# OS marker values (in OS data area)
888 888   # OS started marker
999 999   # OS control marker

# ====== THREAD 0 DATA (1000-1999) - Bubble Sort Thread - ACTIVE ======
# Thread 0 data and variables - ALL within 1000-1999 range
1020 10   # N = number of elements to sort
1021 64   # Array[0] = 64
1022 25   # Array[1] = 25  
1023 89   # Array[2] = 89
1024 12   # Array[3] = 12
1025 37   # Array[4] = 37
1026 91   # Array[5] = 91
1027 6    # Array[6] = 6
1028 55   # Array[7] = 55
1029 73   # Array[8] = 73
1030 41   # Array[9] = 41

# Thread 0 working variables (1050-1099)
1050 0   # temp variable 1 (array[j] value)
1051 0   # temp variable 2 (array[j+1] value)
1052 0   # temp variable 3 (comparison result)
1053 0   # outer loop counter i (passes)
1054 0   # inner loop counter j (comparisons)
1055 0   # general purpose temp
1056 0   # array[j] address
1057 0   # array[j+1] address
1058 0   # temp storage for values during swap

# Thread 0 marker values (1800-1899)
1800 9999 # Thread 0 started marker  
1801 8888 # Thread 0 completed marker

# Thread 0 stack space: 1900-1999 (100 words for stack)

# ====== THREAD 1 DATA (2000-2999) - LINEAR SEARCH (Starting at address 2000) ======
# Thread 1 data and variables - ALL within 2000-2999 range
2020 10   # N = number of elements
2021 37   # Search key (looking for 37 - should be at index 4)
2022 64   # Search array[0] = 64
2023 25   # Search array[1] = 25
2024 89   # Search array[2] = 89
2025 12   # Search array[3] = 12
2026 37   # Search array[4] = 37
2027 91   # Search array[5] = 91
2028 6    # Search array[6] = 6
2029 55   # Search array[7] = 55
2030 73   # Search array[8] = 73
2031 41   # Search array[9] = 41
2040 -1   # Search result (-1 = not found, else index)

# Thread 1 working variables (2050-2099)
2050 0   # temp variable 1 (current array element value)
2051 0   # temp variable 2 (search key copy)
2052 0   # temp variable 3 (comparison result)
2053 0   # loop counter (i)
2054 0   # current element address (2022 + i)
2055 0   # general purpose temp
2056 0   # general purpose temp 2

# Thread 1 marker values (2800-2899)
2800 7777 # Thread 1 started marker
2801 5555 # Thread 1 completed marker

# Thread 1 stack space: 2900-2999 (100 words for stack)

# ====== THREAD 2 DATA (3000-3999) - Counter Thread - ACTIVE ======
# Thread 2 data and variables - ALL within 3000-3999 range
3020 9    # Counter limit (count 0-8, so 9 numbers)
3021 0    # Current counter value

# Thread 2 working variables (3050-3099)
3050 0   # temp variable 1
3051 0   # temp variable 2 
3052 0   # comparison result
3053 0   # general purpose temp

# Thread 2 marker values (3800-3899)
3800 6666 # Thread 2 started marker
3801 4444 # Thread 2 completed marker
3802 1111 # All threads completed marker

# Thread 2 stack space: 3900-3999 (100 words for stack)

# ====== THREAD 3 DATA (4000-4999) - INACTIVE ======
# First instruction at 4000 should be SYSCALL HLT to keep thread inactive
4020 0    # Placeholder data
4800 4001 # Thread 3 inactive marker
# Thread 3 stack space: 4900-4999

# ====== THREAD 4 DATA (5000-5999) - INACTIVE ======
# First instruction at 5000 should be SYSCALL HLT to keep thread inactive
5020 0    # Placeholder data
5800 5001 # Thread 4 inactive marker
# Thread 4 stack space: 5900-5999

# ====== THREAD 5 DATA (6000-6999) - INACTIVE ======
# First instruction at 6000 should be SYSCALL HLT to keep thread inactive
6020 0    # Placeholder data
6800 6001 # Thread 5 inactive marker
# Thread 5 stack space: 6900-6999

# ====== THREAD 6 DATA (7000-7999) - INACTIVE ======
# First instruction at 7000 should be SYSCALL HLT to keep thread inactive
7020 0    # Placeholder data
7800 7001 # Thread 6 inactive marker
# Thread 6 stack space: 7900-7999

# ====== THREAD 7 DATA (8000-8999) - INACTIVE ======
# First instruction at 8000 should be SYSCALL HLT to keep thread inactive
8020 0    # Placeholder data
8800 8001 # Thread 7 inactive marker
# Thread 7 stack space: 8900-8999

# ====== THREAD 8 DATA (9000-9999) - INACTIVE ======
# First instruction at 9000 should be SYSCALL HLT to keep thread inactive
9020 0    # Placeholder data
9800 9001 # Thread 8 inactive marker
# Thread 8 stack space: 9900-9999

# ====== THREAD 9 DATA (10000-10999) - Thread #10 in spec - INACTIVE ======
# First instruction at 10000 should be SYSCALL HLT to keep thread inactive
10020 0   # Placeholder data
10800 10001 # Thread 9 (Thread #10) inactive marker
# Thread 9 stack space: 10900-10999

End Data Section

Begin Instruction Section
# ==== OS STARTUP (Instructions 0-9) ====
0 SYSCALL PRN 888    # OS started
1 SET 0 21           # Set current thread = 0
2 SET 2 103          # Set thread 0 to running
3 USER 104           # Switch to user mode, jump to thread 0's PC (address 1000)

# ==== OS SCHEDULER (Instructions 4-9) ====
4 HLT  # Should not reach here
5 HLT
6 HLT
7 HLT
8 HLT
9 HLT

# ==== THREAD 0: BUBBLE SORT (Starting at address 1000) ====
1000 SYSCALL PRN 1800   # Thread 0 started marker
1001 SYSCALL PRN 1020   # Print N (10)

# Print original array
1002 SYSCALL PRN 1021   # Print array[0]
1003 SYSCALL PRN 1022   # Print array[1]
1004 SYSCALL PRN 1023   # Print array[2]
1005 SYSCALL PRN 1024   # Print array[3]
1006 SYSCALL PRN 1025   # Print array[4]
1007 SYSCALL PRN 1026   # Print array[5]
1008 SYSCALL PRN 1027   # Print array[6]
1009 SYSCALL PRN 1028   # Print array[7]
1010 SYSCALL PRN 1029   # Print array[8]
1011 SYSCALL PRN 1030   # Print array[9]
1012 SYSCALL YIELD      # YIELD to other threads

# BUBBLE SORT
# Outer loop: for i = N-1 down to 1
1013 CPY 1020 1053      # i = N (10)
1014 ADD 1053 -1        # i = N-1 (9)

# OUTER_LOOP: (address 1015)
1015 SET 0 1054         # j = 0 (inner loop counter)

# INNER_LOOP: (address 1016)
# Calculate addresses: array[j] = 1021 + j, array[j+1] = 1021 + j + 1
1016 SET 1021 1056      # addr_j = 1021
1017 ADDI 1056 1054     # addr_j = 1021 + j
1018 SET 1021 1057      # addr_j_plus_1 = 1021
1019 ADDI 1057 1054     # addr_j_plus_1 = 1021 + j
1020 ADD 1057 1         # addr_j_plus_1 = 1021 + j + 1

# Load values from calculated addresses using CPYI
1021 CPYI 1056 1050     # array[j] -> temp1 (indirect load)
1022 CPYI 1057 1051     # array[j+1] -> temp2 (indirect load)

# Compare array[j] and array[j+1]
# We want to swap if array[j] > array[j+1]
1023 CPY 1050 1052      # temp3 = array[j] 
1024 SUBI 1051 1052     # 1052 = array[j+1] - array[j] (SUBI does A2 = A1 - A2)
# If array[j] > array[j+1], then array[j+1] - array[j] < 0
# If array[j] <= array[j+1], then array[j+1] - array[j] >= 0
# We want to swap when array[j+1] - array[j] <= 0 (i.e., array[j] >= array[j+1])
1025 JIF 1052 1028      # if array[j+1] - array[j] <= 0, jump to SWAP

# NO_SWAP: Jump over swap code to continue inner loop
1026 SET 0 1055         # Set temp to 0 for unconditional jump
1027 JIF 1055 1035      # Jump to CONTINUE_INNER (since 0 <= 0)

# SWAP using CPYI2: (address 1028)
1028 SET 1051 1058      # Store array[j+1] value in temp storage
1029 CPYI2 1058 1056    # Put array[j+1] value into array[j] location
1030 SET 1050 1058      # Store array[j] value in temp storage  
1031 CPYI2 1058 1057    # Put array[j] value into array[j+1] location
1032 SYSCALL YIELD      # YIELD after swap
1033 SET 0 1055         # Set temp to 0 for unconditional jump to continue
1034 JIF 1055 1035      # Jump to CONTINUE_INNER

# CONTINUE_INNER: (address 1035)
1035 ADD 1054 1         # j++
1036 CPY 1053 1055      # temp = i
1037 ADD 1055 -1        # temp = i - 1 
1038 CPY 1055 1058      # temp2 = i - 1
1039 SUBI 1054 1058     # 1058 = j - (i-1) 
1040 JIF 1058 1016      # if j - (i-1) <= 0 (i.e., j <= i-1), continue INNER_LOOP
1041 SYSCALL YIELD      # YIELD after each pass

# End of inner loop, continue outer loop
1042 ADD 1053 -1        # i--
1043 SET 0 1055         # temp = 0
1044 CPY 1055 1058      # temp2 = 0
1045 SUBI 1053 1058     # 1058 = i - 0 = i
1046 JIF 1058 1049      # if i <= 0, jump to completion
1047 SET 0 1058         # Set temp to 0 for unconditional jump
1048 JIF 1058 1015      # Always jump back to OUTER_LOOP (since 0 <= 0)

# SORTING COMPLETED! (address 1049)
1049 SYSCALL PRN 1801   # Sorting completed marker
1050 SYSCALL PRN 1021   # Print sorted[0]
1051 SYSCALL PRN 1022   # Print sorted[1]
1052 SYSCALL PRN 1023   # Print sorted[2]
1053 SYSCALL PRN 1024   # Print sorted[3]
1054 SYSCALL PRN 1025   # Print sorted[4]
1055 SYSCALL PRN 1026   # Print sorted[5]
1056 SYSCALL PRN 1027   # Print sorted[6]
1057 SYSCALL PRN 1028   # Print sorted[7]
1058 SYSCALL PRN 1029   # Print sorted[8]
1059 SYSCALL PRN 1030   # Print sorted[9]
1060 SYSCALL YIELD      # Final YIELD
1061 SYSCALL HLT        # Thread 0 termination

# ==== THREAD 1: LINEAR SEARCH (Starting at address 2000) ====
2000 SYSCALL PRN 2800   # Thread 1 started marker
2001 SYSCALL PRN 2020   # Print N (10)
2002 SYSCALL PRN 2021   # Print search key (37)

# Print search array
2003 SYSCALL PRN 2022   # Print array[0]
2004 SYSCALL PRN 2023   # Print array[1]
2005 SYSCALL PRN 2024   # Print array[2]
2006 SYSCALL PRN 2025   # Print array[3]
2007 SYSCALL PRN 2026   # Print array[4]
2008 SYSCALL PRN 2027   # Print array[5]
2009 SYSCALL PRN 2028   # Print array[6]
2010 SYSCALL PRN 2029   # Print array[7]
2011 SYSCALL PRN 2030   # Print array[8]
2012 SYSCALL PRN 2031   # Print array[9]
2013 SYSCALL YIELD      # YIELD after printing

# LINEAR SEARCH ALGORITHM
2014 SET -1 2040        # result = -1 (not found)
2015 SET 0 2053         # i = 0 (loop counter)

# SEARCH_LOOP: (address 2016)
2016 SET 2022 2054      # base_addr = 2022 (start of array)
2017 ADDI 2054 2053     # current_addr = 2022 + i
2018 CPYI 2054 2050     # array[i] -> temp (load current element)
2019 CPY 2050 2051      # temp1 = array[i] (backup for equality check)
2020 SUBI 2021 2051     # temp1 = search_key - array[i] (result in 2051)
2021 JIF 2051 2024      # if search_key - array[i] <= 0, check reverse
2022 SET 0 2055         # Not equal, continue loop
2023 JIF 2055 2030      # Jump to CONTINUE_LOOP

# Check reverse direction for exact equality (address 2024)
2024 CPY 2021 2052      # temp2 = search_key
2025 SUBI 2050 2052     # temp2 = array[i] - search_key (result in 2052)
2026 JIF 2052 2037      # if array[i] - search_key <= 0, then FOUND!
2027 SET 0 2055         # Not equal, continue loop
2028 JIF 2055 2030      # Jump to CONTINUE_LOOP

# CONTINUE_LOOP: (address 2030)
2030 ADD 2053 1         # i++
2031 SET 10 2055        # N = 10
2032 SUBI 2053 2055     # temp = i - N (result in 2055)
2033 JIF 2055 2016      # if i - N <= 0 (i <= N), continue SEARCH_LOOP

# NOT FOUND: (address 2034)
2034 SET -1 2040        # result = -1 (not found)
2035 SET 0 2055         # temp = 0 for unconditional jump
2036 JIF 2055 2038      # Jump to SEARCH_COMPLETED

# FOUND: (address 2037)
2037 CPY 2053 2040      # result = i (current index)

# SEARCH_COMPLETED: (address 2038)
2038 SYSCALL PRN 2801   # Search completed marker
2039 SYSCALL PRN 2040   # Print result
2040 SYSCALL YIELD      # YIELD
2041 SYSCALL HLT        # Thread 1 termination

# ==== THREAD 2: LOOP-BASED COUNTER (Starting at address 3000) ====
3000 SYSCALL PRN 3800   # Thread 2 started marker
3001 SYSCALL PRN 3020   # Print limit (9)

# COUNTER LOOP - Print 0 through 8 (9 numbers total)
3002 SET 0 3021         # counter = 0
# COUNT_LOOP: (address 3003)
3003 SYSCALL PRN 3021   # Print current counter
3004 SYSCALL YIELD      # YIELD
3005 ADD 3021 1         # counter++
3006 SET 9 3050         # limit = 9 (using Thread 2's temp vars)
3007 CPY 3050 3051      # temp = 9
3008 SUBI 3021 3051     # 3051 = counter - 9
3009 JIF 3051 3003      # if counter - 9 <= 0 (i.e., counter < 9), continue COUNT_LOOP

# COUNTER COMPLETED
3010 SYSCALL PRN 3801   # Thread 2 completed marker
3011 SYSCALL PRN 3802   # All threads completed marker
3012 SYSCALL HLT        # Thread 2 termination and system halt

# ==== THREAD 3: INACTIVE (Starting at address 4000) ====
4000 SYSCALL HLT        # Thread 3 inactive - immediate termination

# ==== THREAD 4: INACTIVE (Starting at address 5000) ====
5000 SYSCALL HLT        # Thread 4 inactive - immediate termination

# ==== THREAD 5: INACTIVE (Starting at address 6000) ====
6000 SYSCALL HLT        # Thread 5 inactive - immediate termination

# ==== THREAD 6: INACTIVE (Starting at address 7000) ====
7000 SYSCALL HLT        # Thread 6 inactive - immediate termination

# ==== THREAD 7: INACTIVE (Starting at address 8000) ====
8000 SYSCALL HLT        # Thread 7 inactive - immediate termination

# ==== THREAD 8: INACTIVE (Starting at address 9000) ====
9000 SYSCALL HLT        # Thread 8 inactive - immediate termination

# ==== THREAD 9 (Thread #10 in spec): INACTIVE (Starting at address 10000) ====
10000 SYSCALL HLT       # Thread 9 (Thread #10) inactive - immediate termination

End Instruction Section 