# GTU-C312 Round-Robin Operating System - NO JIF VERSION
# ðŸŽ¯ COOPERATIVE MULTITASKING - ROUND ROBIN SCHEDULER!
# âœ… Thread 1: Bubble Sort - One comparison per turn
# âœ… Thread 2: Linear Search - One element check per turn  
# âœ… Thread 3: Custom Counter - One increment per turn
# âœ… Threads take turns doing work cooperatively
# âœ… NO JIF INSTRUCTIONS - Pure sequential execution!

Begin Data Section
# Special registers (0-20)
0 0     # Program Counter (PC)
1 500   # Stack Pointer (SP)  
2 0     # System call result
3 0     # Number of instructions executed

# Thread control data
21 1    # Current thread (1, 2, or 3)
22 0    # Round counter
23 0    # Total rounds completed

# Thread 1 (Bubble Sort) state
100 0   # Current pass number
101 0   # Current position in pass
102 5   # Number of comparisons needed
103 0   # Thread 1 completion flag (0=active, 1=done)

# Thread 2 (Linear Search) state  
110 0   # Current search index
111 -1  # Search result (-1 = not found yet)
112 0   # Thread 2 completion flag

# Thread 3 (Counter) state
120 0   # Current counter value
121 0   # Thread 3 completion flag

# Sorting data (1000+)
1000 5    # N = number of elements
1001 64   # Array[0] = 64
1002 25   # Array[1] = 25  
1003 89   # Array[2] = 89
1004 12   # Array[3] = 12
1005 37   # Array[4] = 37

# Search data (1100+)
1100 5    # N = number of elements
1101 37   # Search key
1102 64   # Search array[0] = 64
1103 25   # Search array[1] = 25
1104 89   # Search array[2] = 89
1105 12   # Search array[3] = 12
1106 37   # Search array[4] = 37

# Working variables
1200 0   # temp1
1201 0   # temp2
1202 0   # temp3
1203 0   # temp4

End Data Section

Begin Instruction Section
# ==== OS STARTUP ====
0 SYSCALL PRN 8888   # OS Started
1 SYSCALL PRN 1000   # Print array size

# Print initial arrays
2 SYSCALL PRN 1001   # 64
3 SYSCALL PRN 1002   # 25  
4 SYSCALL PRN 1003   # 89
5 SYSCALL PRN 1004   # 12
6 SYSCALL PRN 1005   # 37

# ==== ROUND ROBIN EXECUTION ====
# Round 1: Thread 1 -> Thread 2 -> Thread 3

# THREAD 1 TURN 1: First bubble sort comparison (0,1)
7 SYSCALL PRN 1111   # Thread 1 marker
8 CPY 1001 1200      # Load element[0] = 64
9 CPY 1002 1201      # Load element[1] = 25
10 CPY 1200 1202     # Compare prep
11 SUBI 1202 1201    # 64 - 25 = 39 (positive, swap needed)
12 CPY 1201 1001     # element[0] = 25
13 CPY 1200 1002     # element[1] = 64
# Thread 1 yields

# THREAD 2 TURN 1: Check first element in search
14 SYSCALL PRN 2222  # Thread 2 marker  
15 CPY 1102 1200     # Load search array[0] = 64
16 CPY 1200 1202     # Copy for comparison
17 SUBI 1202 1101    # 64 - 37 = 27 (not zero, not found)
18 ADD 110 1         # Increment search index to 1
# Thread 2 yields

# THREAD 3 TURN 1: First counter increment
19 SYSCALL PRN 3333  # Thread 3 marker
20 ADD 120 1         # counter = 1
21 SYSCALL PRN 120   # Print 1
# Thread 3 yields

# THREAD 1 TURN 2: Second comparison (1,2)
22 SYSCALL PRN 1111  # Thread 1 marker
23 CPY 1002 1200     # Load element[1] = 64
24 CPY 1003 1201     # Load element[2] = 89
25 CPY 1200 1202     # Compare prep
26 SUBI 1202 1201    # 64 - 89 = -25 (negative, no swap)
# Thread 1 yields

# THREAD 2 TURN 2: Check second element
27 SYSCALL PRN 2222  # Thread 2 marker
28 CPY 1103 1200     # Load search array[1] = 25
29 CPY 1200 1202     # Copy for comparison
30 SUBI 1202 1101    # 25 - 37 = -12 (not zero, not found)
31 ADD 110 1         # Increment search index to 2
# Thread 2 yields

# THREAD 3 TURN 2: Second counter increment
32 SYSCALL PRN 3333  # Thread 3 marker
33 ADD 120 1         # counter = 2
34 SYSCALL PRN 120   # Print 2
# Thread 3 yields

# THREAD 1 TURN 3: Third comparison (2,3)
35 SYSCALL PRN 1111  # Thread 1 marker
36 CPY 1003 1200     # Load element[2] = 89
37 CPY 1004 1201     # Load element[3] = 12
38 CPY 1200 1202     # Compare prep
39 SUBI 1202 1201    # 89 - 12 = 77 (positive, swap needed)
40 CPY 1201 1003     # element[2] = 12
41 CPY 1200 1004     # element[3] = 89
# Thread 1 yields

# THREAD 2 TURN 3: Check third element
42 SYSCALL PRN 2222  # Thread 2 marker
43 CPY 1104 1200     # Load search array[2] = 89
44 CPY 1200 1202     # Copy for comparison
45 SUBI 1202 1101    # 89 - 37 = 52 (not zero, not found)
46 ADD 110 1         # Increment search index to 3
# Thread 2 yields

# THREAD 3 TURN 3: Third counter increment
47 SYSCALL PRN 3333  # Thread 3 marker
48 ADD 120 1         # counter = 3
49 SYSCALL PRN 120   # Print 3
# Thread 3 yields

# THREAD 1 TURN 4: Fourth comparison (3,4)
50 SYSCALL PRN 1111  # Thread 1 marker
51 CPY 1004 1200     # Load element[3] = 89
52 CPY 1005 1201     # Load element[4] = 37
53 CPY 1200 1202     # Compare prep
54 SUBI 1202 1201    # 89 - 37 = 52 (positive, swap needed)
55 CPY 1201 1004     # element[3] = 37
56 CPY 1200 1005     # element[4] = 89
# Thread 1 yields

# THREAD 2 TURN 4: Check fourth element
57 SYSCALL PRN 2222  # Thread 2 marker
58 CPY 1105 1200     # Load search array[3] = 12
59 CPY 1200 1202     # Copy for comparison
60 SUBI 1202 1101    # 12 - 37 = -25 (not zero, not found)
61 ADD 110 1         # Increment search index to 4
# Thread 2 yields

# THREAD 3 TURN 4: Fourth counter increment
62 SYSCALL PRN 3333  # Thread 3 marker
63 ADD 120 1         # counter = 4
64 SYSCALL PRN 120   # Print 4
# Thread 3 yields

# THREAD 1 TURN 5: Second pass, first comparison (0,1)
65 SYSCALL PRN 1111  # Thread 1 marker
66 CPY 1001 1200     # Load element[0] = 25
67 CPY 1002 1201     # Load element[1] = 64
68 CPY 1200 1202     # Compare prep  
69 SUBI 1202 1201    # 25 - 64 = -39 (negative, no swap needed)
# Thread 1 yields

# THREAD 2 TURN 5: Check fifth element - FOUND!
70 SYSCALL PRN 2222  # Thread 2 marker
71 CPY 1106 1200     # Load search array[4] = 37
72 CPY 1200 1202     # Copy for comparison
73 SUBI 1202 1101    # 37 - 37 = 0 (FOUND!)
74 SET 4 111         # Set result = 4 (found at index 4)
# Thread 2 yields

# THREAD 3 TURN 5: Fifth counter increment
75 SYSCALL PRN 3333  # Thread 3 marker
76 ADD 120 1         # counter = 5
77 SYSCALL PRN 120   # Print 5

# Continue pattern for remaining work...
# THREAD 1: More sorting passes
78 SYSCALL PRN 1111  # Thread 1 - comparison (1,2)
79 CPY 1002 1200     # element[1] = 64
80 CPY 1003 1201     # element[2] = 12
81 CPY 1200 1202     # Compare
82 SUBI 1202 1201    # 64 - 12 = 52 (swap needed)
83 CPY 1201 1002     # element[1] = 12
84 CPY 1200 1003     # element[2] = 64

85 SYSCALL PRN 3333  # Thread 3 turn
86 ADD 120 1         # counter = 6
87 SYSCALL PRN 120   # Print 6

88 SYSCALL PRN 1111  # Thread 1 - comparison (2,3)
89 CPY 1003 1200     # element[2] = 64
90 CPY 1004 1201     # element[3] = 37
91 CPY 1200 1202     # Compare
92 SUBI 1202 1201    # 64 - 37 = 27 (swap needed)
93 CPY 1201 1003     # element[2] = 37
94 CPY 1200 1004     # element[3] = 64

95 SYSCALL PRN 3333  # Thread 3 turn
96 ADD 120 1         # counter = 7
97 SYSCALL PRN 120   # Print 7

# Final sorting pass
98 SYSCALL PRN 1111  # Thread 1 - comparison (0,1)
99 CPY 1001 1200     # element[0] = 25
100 CPY 1002 1201    # element[1] = 12
101 CPY 1200 1202    # Compare
102 SUBI 1202 1201   # 25 - 12 = 13 (swap needed)
103 CPY 1201 1001    # element[0] = 12
104 CPY 1200 1002    # element[1] = 25

105 SYSCALL PRN 3333 # Thread 3 turn
106 ADD 120 1        # counter = 8
107 SYSCALL PRN 120  # Print 8

108 SYSCALL PRN 3333 # Thread 3 turn
109 ADD 120 1        # counter = 9
110 SYSCALL PRN 120  # Print 9

# ==== FINAL RESULTS ====
111 SYSCALL PRN 9999 # All threads completed
112 SYSCALL PRN 1001 # Final sorted array - element 0 (12)
113 SYSCALL PRN 1002 # element 1 (25)
114 SYSCALL PRN 1003 # element 2 (37)
115 SYSCALL PRN 1004 # element 3 (64)
116 SYSCALL PRN 1005 # element 4 (89)

117 SYSCALL PRN 5555 # Search result
118 SYSCALL PRN 111  # Found at index 4

119 SYSCALL PRN 4444 # Counter final
120 SYSCALL PRN 120  # Final counter value

121 HLT

End Instruction Section 